package yadi.dlms;

import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

import yadi.dlms.DlmsException;
import yadi.dlms.DlmsParser;

public class TestDlmsParser {

	@Test
	public void testUint8toString() throws DlmsException {
		assertEquals("0", DlmsParser.getString(new byte[] {0x11, 0x00}));
		assertEquals("1", DlmsParser.getString(new byte[] {0x11, 0x01}));
		assertEquals("12", DlmsParser.getString(new byte[] {0x11, 0x0C}));
		assertEquals("33", DlmsParser.getString(new byte[] {0x11, 0x21}));
		assertEquals("254", DlmsParser.getString(new byte[] {0x11, (byte)0xFE}));
		assertEquals("255", DlmsParser.getString(new byte[] {0x11, (byte)0xFF}));
	}
	
	@Test
	public void testInt8toString() throws DlmsException {
		assertEquals("0", DlmsParser.getString(new byte[] {0x0F, 0x00}));
		assertEquals("1", DlmsParser.getString(new byte[] {0x0F, 0x01}));
		assertEquals("12", DlmsParser.getString(new byte[] {0x0F, 0x0C}));
		assertEquals("45", DlmsParser.getString(new byte[] {0x0F, 0x2D}));
		assertEquals("127", DlmsParser.getString(new byte[] {0x0F, (byte)0x7F}));
		assertEquals("-128", DlmsParser.getString(new byte[] {0x0F, (byte)0x80}));
		assertEquals("-127", DlmsParser.getString(new byte[] {0x0F, (byte)0x81}));
		assertEquals("-95", DlmsParser.getString(new byte[] {0x0F, (byte)0xA1}));
		assertEquals("-2", DlmsParser.getString(new byte[] {0x0F, (byte)0xFE}));
		assertEquals("-1", DlmsParser.getString(new byte[] {0x0F, (byte)0xFF}));
	}
	
	@Test
	public void testUint16toString() throws DlmsException {
		assertEquals("0", DlmsParser.getString(new byte[] {0x12, 0x00, 0x00}));
		assertEquals("1", DlmsParser.getString(new byte[] {0x12, 0x00, 0x01}));
		assertEquals("12", DlmsParser.getString(new byte[] {0x12, 0x00, 0x0C}));
		assertEquals("45", DlmsParser.getString(new byte[] {0x12, 0x00, 0x2D}));
		assertEquals("4388", DlmsParser.getString(new byte[] {0x12, 0x11, 0x24}));
		assertEquals("16640", DlmsParser.getString(new byte[] {0x12, 0x41, 0x00}));
		assertEquals("32767", DlmsParser.getString(new byte[] {0x12, 0x7F, (byte)0xFF}));
		assertEquals("32768", DlmsParser.getString(new byte[] {0x12, (byte)0x80, (byte)0x00}));
		assertEquals("32769", DlmsParser.getString(new byte[] {0x12, (byte)0x80, (byte)0x01}));
		assertEquals("65441", DlmsParser.getString(new byte[] {0x12, (byte)0xFF, (byte)0xA1}));
		assertEquals("65534", DlmsParser.getString(new byte[] {0x12, (byte)0xFF, (byte)0xFE}));
		assertEquals("65535", DlmsParser.getString(new byte[] {0x12, (byte)0xFF, (byte)0xFF}));
	}
	
	@Test
	public void testInt16toString() throws DlmsException {
		assertEquals("0", DlmsParser.getString(new byte[] {0x10, 0x00, 0x00}));
		assertEquals("1", DlmsParser.getString(new byte[] {0x10, 0x00, 0x01}));
		assertEquals("12", DlmsParser.getString(new byte[] {0x10, 0x00, 0x0C}));
		assertEquals("45", DlmsParser.getString(new byte[] {0x10, 0x00, 0x2D}));
		assertEquals("4388", DlmsParser.getString(new byte[] {0x10, 0x11, 0x24}));
		assertEquals("16640", DlmsParser.getString(new byte[] {0x10, 0x41, 0x00}));
		assertEquals("32767", DlmsParser.getString(new byte[] {0x10, 0x7F, (byte)0xFF}));
		assertEquals("-32768", DlmsParser.getString(new byte[] {0x10, (byte)0x80, (byte)0x00}));
		assertEquals("-32767", DlmsParser.getString(new byte[] {0x10, (byte)0x80, (byte)0x01}));
		assertEquals("-95", DlmsParser.getString(new byte[] {0x10, (byte)0xFF, (byte)0xA1}));
		assertEquals("-2", DlmsParser.getString(new byte[] {0x10, (byte)0xFF, (byte)0xFE}));
		assertEquals("-1", DlmsParser.getString(new byte[] {0x10, (byte)0xFF, (byte)0xFF}));
	}
	
	@Test
	public void testUint32toString() throws DlmsException {
		assertEquals("0", DlmsParser.getString(new byte[] {0x06, 0x00, 0x00, 0x00, 0x00}));
		assertEquals("1", DlmsParser.getString(new byte[] {0x06, 0x00, 0x00, 0x00, 0x01}));
		assertEquals("12", DlmsParser.getString(new byte[] {0x06, 0x00, 0x00, 0x00, 0x0C}));
		assertEquals("45", DlmsParser.getString(new byte[] {0x06, 0x00, 0x00, 0x00, 0x2D}));
		assertEquals("4388", DlmsParser.getString(new byte[] {0x06, 0x00, 0x00, 0x11, 0x24}));
		assertEquals("16640", DlmsParser.getString(new byte[] {0x06, 0x00, 0x00, 0x41, 0x00}));
		assertEquals("2147483647", DlmsParser.getString(new byte[] {0x06, 0x7F, (byte)0xFF, (byte)0xFF, (byte)0xFF}));
		assertEquals("2147483648", DlmsParser.getString(new byte[] {0x06, (byte)0x80, (byte)0x00, (byte)0x00, (byte)0x00}));
		assertEquals("2147483649", DlmsParser.getString(new byte[] {0x06, (byte)0x80, (byte)0x00, (byte)0x00, (byte)0x01}));
		assertEquals("4294967201", DlmsParser.getString(new byte[] {0x06, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xA1}));
		assertEquals("4294967294", DlmsParser.getString(new byte[] {0x06, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFE}));
		assertEquals("4294967295", DlmsParser.getString(new byte[] {0x06, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}));
	}
	
	@Test
	public void testInt32toString() throws DlmsException {
		assertEquals("0", DlmsParser.getString(new byte[] {0x05, 0x00, 0x00, 0x00, 0x00}));
		assertEquals("1", DlmsParser.getString(new byte[] {0x05, 0x00, 0x00, 0x00, 0x01}));
		assertEquals("12", DlmsParser.getString(new byte[] {0x05, 0x00, 0x00, 0x00, 0x0C}));
		assertEquals("45", DlmsParser.getString(new byte[] {0x05, 0x00, 0x00, 0x00, 0x2D}));
		assertEquals("4388", DlmsParser.getString(new byte[] {0x05, 0x00, 0x00, 0x11, 0x24}));
		assertEquals("16640", DlmsParser.getString(new byte[] {0x05, 0x00, 0x00, 0x41, 0x00}));
		assertEquals("32767", DlmsParser.getString(new byte[] {0x05, 0x00, 0x00, 0x7F, (byte)0xFF}));
		assertEquals("2147483647", DlmsParser.getString(new byte[] {0x05, 0x7F, (byte)0xFF, (byte)0xFF, (byte)0xFF}));
		assertEquals("-2147483648", DlmsParser.getString(new byte[] {0x05, (byte)0x80, (byte)0x00, (byte)0x00, (byte)0x00}));
		assertEquals("-2147483647", DlmsParser.getString(new byte[] {0x05, (byte)0x80, (byte)0x00, (byte)0x00, (byte)0x01}));
		assertEquals("-95", DlmsParser.getString(new byte[] {0x05, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xA1}));
		assertEquals("-2", DlmsParser.getString(new byte[] {0x05, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFE}));
		assertEquals("-1", DlmsParser.getString(new byte[] {0x05, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}));
	}
	
	@Test
	public void testUint64toString() throws DlmsException {
		assertEquals("0", DlmsParser.getString(new byte[] {0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}));
		assertEquals("1", DlmsParser.getString(new byte[] {0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01}));
		assertEquals("12", DlmsParser.getString(new byte[] {0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C}));
		assertEquals("45", DlmsParser.getString(new byte[] {0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2D}));
		assertEquals("4388", DlmsParser.getString(new byte[] {0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x24}));
		assertEquals("16640", DlmsParser.getString(new byte[] {0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x00}));
		assertEquals("9223372036854775806", DlmsParser.getString(new byte[] {0x15, (byte)0x7F, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFE}));
		assertEquals("9223372036854775807", DlmsParser.getString(new byte[] {0x15, (byte)0x7F, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}));
		assertEquals("9223372036854775808", DlmsParser.getString(new byte[] {0x15, (byte)0x80, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00}));
		assertEquals("9223372036854775809", DlmsParser.getString(new byte[] {0x15, (byte)0x80, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x01}));
		assertEquals("18446744073709551521", DlmsParser.getString(new byte[] {0x15, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xA1}));
		assertEquals("18446744073709551614", DlmsParser.getString(new byte[] {0x15, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFE}));
		assertEquals("18446744073709551615", DlmsParser.getString(new byte[] {0x15, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}));
	}
	
	@Test
	public void testInt64toString() throws DlmsException {
		assertEquals("0", DlmsParser.getString(new byte[] {0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}));
		assertEquals("1", DlmsParser.getString(new byte[] {0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01}));
		assertEquals("12", DlmsParser.getString(new byte[] {0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C}));
		assertEquals("45", DlmsParser.getString(new byte[] {0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2D}));
		assertEquals("4388", DlmsParser.getString(new byte[] {0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x24}));
		assertEquals("16640", DlmsParser.getString(new byte[] {0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x00}));
		assertEquals("9223372036854775806", DlmsParser.getString(new byte[] {0x14, (byte)0x7F, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFE}));
		assertEquals("9223372036854775807", DlmsParser.getString(new byte[] {0x14, (byte)0x7F, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}));
		assertEquals("-9223372036854775808", DlmsParser.getString(new byte[] {0x14, (byte)0x80, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00}));
		assertEquals("-9223372036854775807", DlmsParser.getString(new byte[] {0x14, (byte)0x80, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x01}));
		assertEquals("-95", DlmsParser.getString(new byte[] {0x14, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xA1}));
		assertEquals("-2", DlmsParser.getString(new byte[] {0x14, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFE}));
		assertEquals("-1", DlmsParser.getString(new byte[] {0x14, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}));
	}
	
	@Test
	public void testFloat32toString() throws DlmsException {
		assertEquals("1.0", DlmsParser.getString(new byte[] {0x17, 0x3F, (byte)0x80, 0x00, 0x00}));
		assertEquals("62056.0", DlmsParser.getString(new byte[] {0x17, 0x47, 0x72, 0x68, 0x00}));
		assertEquals("238.877", DlmsParser.getString(new byte[] {0x17, (byte)0x43, (byte)0x6E, (byte)0xE0, (byte)0x83}));
	}
	
	@Test
	public void testFloat64toString() throws DlmsException {
		assertEquals("1.0", DlmsParser.getString(new byte[] {0x18, 0x3F, (byte)0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}));
		assertEquals("62056.0", DlmsParser.getString(new byte[] {0x18, 0x40, (byte)0xEE, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x00}));
	}
	
	@Test
	public void testAsciiToString() throws DlmsException {
		assertEquals("", DlmsParser.getString(new byte[] {0x0A, 0x00}));
		assertEquals("one flew over the cuckoo's nest", DlmsParser.getString(new byte[] {0x0A, 0x1F, 0x6f, 0x6e, 0x65, 0x20, 0x66, 0x6c, 0x65, 0x77, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x63, 0x6b, 0x6f, 0x6f, 0x27, 0x73, 0x20, 0x6e, 0x65, 0x73, 0x74}));
		assertEquals("all work and no play makes jack a dull boyall work and no play makes jack a dull boyall work and no play makes jack a dull boyall work and no play makes jack a dull boyall work and no play makes jack a dull boyall work and no play makes jack a dull boyall work and no play makes jack a dull boyall work and no play makes jack a dull boyall work and no play makes jack a dull boyall work and no play makes jack a dull boy", 
				DlmsParser.getString(new byte[] {0x0A, (byte)0x82, 0x01, (byte)0xA4, 0x61, 0x6c, 0x6c, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x6f, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x6a, 0x61, 0x63, 0x6b, 0x20, 0x61, 0x20, 0x64, 0x75, 0x6c, 0x6c, 0x20, 0x62, 0x6f, 0x79, 
												 0x61, 0x6c, 0x6c, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x6f, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x6a, 0x61, 0x63, 0x6b, 0x20, 0x61, 0x20, 0x64, 0x75, 0x6c, 0x6c, 0x20, 0x62, 0x6f, 0x79, 
												 0x61, 0x6c, 0x6c, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x6f, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x6a, 0x61, 0x63, 0x6b, 0x20, 0x61, 0x20, 0x64, 0x75, 0x6c, 0x6c, 0x20, 0x62, 0x6f, 0x79, 
												 0x61, 0x6c, 0x6c, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x6f, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x6a, 0x61, 0x63, 0x6b, 0x20, 0x61, 0x20, 0x64, 0x75, 0x6c, 0x6c, 0x20, 0x62, 0x6f, 0x79, 
												 0x61, 0x6c, 0x6c, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x6f, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x6a, 0x61, 0x63, 0x6b, 0x20, 0x61, 0x20, 0x64, 0x75, 0x6c, 0x6c, 0x20, 0x62, 0x6f, 0x79, 
												 0x61, 0x6c, 0x6c, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x6f, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x6a, 0x61, 0x63, 0x6b, 0x20, 0x61, 0x20, 0x64, 0x75, 0x6c, 0x6c, 0x20, 0x62, 0x6f, 0x79, 
												 0x61, 0x6c, 0x6c, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x6f, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x6a, 0x61, 0x63, 0x6b, 0x20, 0x61, 0x20, 0x64, 0x75, 0x6c, 0x6c, 0x20, 0x62, 0x6f, 0x79, 
												 0x61, 0x6c, 0x6c, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x6f, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x6a, 0x61, 0x63, 0x6b, 0x20, 0x61, 0x20, 0x64, 0x75, 0x6c, 0x6c, 0x20, 0x62, 0x6f, 0x79, 
												 0x61, 0x6c, 0x6c, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x6f, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x6a, 0x61, 0x63, 0x6b, 0x20, 0x61, 0x20, 0x64, 0x75, 0x6c, 0x6c, 0x20, 0x62, 0x6f, 0x79, 
												 0x61, 0x6c, 0x6c, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x6f, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x6a, 0x61, 0x63, 0x6b, 0x20, 0x61, 0x20, 0x64, 0x75, 0x6c, 0x6c, 0x20, 0x62, 0x6f, 0x79}));	
	}
	
	@Test
	public void testUtf8toString() throws DlmsException {
		assertEquals("", DlmsParser.getString(new byte[] {0x0C, 0x00}));
		assertEquals("one flew over the cuckoo's nest", DlmsParser.getString(new byte[] {0x0C, 0x1F, 0x6F, 0x6E, 0x65, 0x20, 0x66, 0x6C, 0x65, 0x77, 0x20, 0x6F, 0x76, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x63, 0x6B, 0x6F, 0x6F, 0x27, 0x73, 0x20, 0x6E, 0x65, 0x73, 0x74}));
		assertEquals("all work and no play makes jack a dull boyall work and no play makes jack a dull boyall work and no play makes jack a dull boyall work and no play makes jack a dull boyall work and no play makes jack a dull boyall work and no play makes jack a dull boyall work and no play makes jack a dull boyall work and no play makes jack a dull boyall work and no play makes jack a dull boyall work and no play makes jack a dull boy", 
				DlmsParser.getString(new byte[] {0x0C, (byte)0x82, 0x01, (byte)0xA4, 0x61, 0x6c, 0x6c, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x6f, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x6a, 0x61, 0x63, 0x6b, 0x20, 0x61, 0x20, 0x64, 0x75, 0x6c, 0x6c, 0x20, 0x62, 0x6f, 0x79, 
												 0x61, 0x6c, 0x6c, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x6f, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x6a, 0x61, 0x63, 0x6b, 0x20, 0x61, 0x20, 0x64, 0x75, 0x6c, 0x6c, 0x20, 0x62, 0x6f, 0x79, 
												 0x61, 0x6c, 0x6c, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x6f, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x6a, 0x61, 0x63, 0x6b, 0x20, 0x61, 0x20, 0x64, 0x75, 0x6c, 0x6c, 0x20, 0x62, 0x6f, 0x79, 
												 0x61, 0x6c, 0x6c, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x6f, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x6a, 0x61, 0x63, 0x6b, 0x20, 0x61, 0x20, 0x64, 0x75, 0x6c, 0x6c, 0x20, 0x62, 0x6f, 0x79, 
												 0x61, 0x6c, 0x6c, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x6f, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x6a, 0x61, 0x63, 0x6b, 0x20, 0x61, 0x20, 0x64, 0x75, 0x6c, 0x6c, 0x20, 0x62, 0x6f, 0x79, 
												 0x61, 0x6c, 0x6c, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x6f, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x6a, 0x61, 0x63, 0x6b, 0x20, 0x61, 0x20, 0x64, 0x75, 0x6c, 0x6c, 0x20, 0x62, 0x6f, 0x79, 
												 0x61, 0x6c, 0x6c, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x6f, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x6a, 0x61, 0x63, 0x6b, 0x20, 0x61, 0x20, 0x64, 0x75, 0x6c, 0x6c, 0x20, 0x62, 0x6f, 0x79, 
												 0x61, 0x6c, 0x6c, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x6f, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x6a, 0x61, 0x63, 0x6b, 0x20, 0x61, 0x20, 0x64, 0x75, 0x6c, 0x6c, 0x20, 0x62, 0x6f, 0x79, 
												 0x61, 0x6c, 0x6c, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x6f, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x6a, 0x61, 0x63, 0x6b, 0x20, 0x61, 0x20, 0x64, 0x75, 0x6c, 0x6c, 0x20, 0x62, 0x6f, 0x79, 
												 0x61, 0x6c, 0x6c, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x6f, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x6a, 0x61, 0x63, 0x6b, 0x20, 0x61, 0x20, 0x64, 0x75, 0x6c, 0x6c, 0x20, 0x62, 0x6f, 0x79}));	
	}
	
	@Test
	public void testDateTimeToString() throws DlmsException {
		assertEquals("2018/10/13 10:00:00", DlmsParser.getString(new byte[] {0x19, 0x07, (byte)0xE2, 0x0A, 0x0D, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}));
		assertEquals("2018/01/30 22:55:41", DlmsParser.getString(new byte[] {0x19, 0x07, (byte)0xE2, 0x01, 0x1E, 0x00, 0x16, 0x37, 0x29, 0x00, 0x00, 0x00, 0x00}));
		assertEquals("2018/10/13 10:00:00", DlmsParser.getDateTimeString(new byte[] {0x19, 0x07, (byte)0xE2, 0x0A, 0x0D, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}));
		assertEquals("2018/01/30 22:55:41", DlmsParser.getDateTimeString(new byte[] {0x19, 0x07, (byte)0xE2, 0x01, 0x1E, 0x00, 0x16, 0x37, 0x29, 0x00, 0x00, 0x00, 0x00}));
		assertEquals("2018/10/13 10:00:00", DlmsParser.getDateTimeString(new byte[] {0x09, 0x0C, 0x07, (byte)0xE2, 0x0A, 0x0D, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}));
		assertEquals("2018/01/30 22:55:41", DlmsParser.getDateTimeString(new byte[] {0x09, 0x0C, 0x07, (byte)0xE2, 0x01, 0x1E, 0x00, 0x16, 0x37, 0x29, 0x00, 0x00, 0x00, 0x00}));
	}
	
	@Test
	public void testDateToString() throws DlmsException {
		assertEquals("2018/10/13", DlmsParser.getString(new byte[] {0x1A, 0x07, (byte)0xE2, 0x0A, 0x0D, 0x00}));
		assertEquals("2018/01/30", DlmsParser.getString(new byte[] {0x1A, 0x07, (byte)0xE2, 0x01, 0x1E, 0x00}));
		assertEquals("2018/10/13", DlmsParser.getDateString(new byte[] {0x1A, 0x07, (byte)0xE2, 0x0A, 0x0D, 0x00}));
		assertEquals("2018/01/30", DlmsParser.getDateString(new byte[] {0x1A, 0x07, (byte)0xE2, 0x01, 0x1E, 0x00}));
		assertEquals("2018/10/13", DlmsParser.getDateString(new byte[] {0x09, 0x05, 0x07, (byte)0xE2, 0x0A, 0x0D, 0x00}));
		assertEquals("2018/01/30", DlmsParser.getDateString(new byte[] {0x09, 0x05, 0x07, (byte)0xE2, 0x01, 0x1E, 0x00}));
	}
	
	@Test
	public void testTimeToString() throws DlmsException {
		assertEquals("10:00:00", DlmsParser.getString(new byte[] {0x1B, 0x0A, 0x00, 0x00, 0x00}));
		assertEquals("22:55:41", DlmsParser.getString(new byte[] {0x1B, 0x16, 0x37, 0x29, 0x00}));
		assertEquals("10:00:00", DlmsParser.getTimeString(new byte[] {0x1B, 0x0A, 0x00, 0x00, 0x00}));
		assertEquals("22:55:41", DlmsParser.getTimeString(new byte[] {0x1B, 0x16, 0x37, 0x29, 0x00}));
		assertEquals("10:00:00", DlmsParser.getTimeString(new byte[] {0x09, 0x04, 0x0A, 0x00, 0x00, 0x00}));
		assertEquals("22:55:41", DlmsParser.getTimeString(new byte[] {0x09, 0x04, 0x16, 0x37, 0x29, 0x00}));
	}
}
